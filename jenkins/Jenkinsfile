pipeline {
    agent any

    environment {
        AZURE_SUBSCRIPTION_ID = credentials('AZURE_SUBSCRIPTION_ID')
        AZURE_CLIENT_ID       = credentials('AZURE_CLIENT_ID')
        AZURE_CLIENT_SECRET   = credentials('AZURE_CLIENT_SECRET')
        AZURE_TENANT_ID       = credentials('AZURE_TENANT_ID')
        ACR_NAME              = "myacrname123"
        IMAGE_NAME            = "hello-world"
        IMAGE_TAG             = "v1"
        HPA_SCRIPT_PATH       = "terraform/scripts"
        RESOURCE_GROUP        = "Idowu-Candidate"
        AKS_CLUSTER_NAME      = "aks-6pcoskve" 
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    checkout scm
                }
            }
        }

        stage('Azure Login') {
            steps {
                script {
                    echo "Logging into Azure..."
                    withCredentials([
                        string(credentialsId: 'AZURE_CLIENT_ID', variable: 'AZURE_CLIENT_ID'),
                        string(credentialsId: 'AZURE_CLIENT_SECRET', variable: 'AZURE_CLIENT_SECRET'),
                        string(credentialsId: 'AZURE_TENANT_ID', variable: 'AZURE_TENANT_ID')
                    ]) {
                        // Set environment variables securely
                        env.AZURE_CLIENT_ID = "${AZURE_CLIENT_ID}"
                        env.AZURE_CLIENT_SECRET = "${AZURE_CLIENT_SECRET}"
                        env.AZURE_TENANT_ID = "${AZURE_TENANT_ID}"

                        sh """
                            az login --service-principal --username \$AZURE_CLIENT_ID --password \$AZURE_CLIENT_SECRET --tenant \$AZURE_TENANT_ID
                        """
                    }
                }
            }
        }

        stage('Login to Azure Container Registry') {
            steps {
                script {
                    echo "Logging into Azure Container Registry..."
                    sh "az acr login -n ${ACR_NAME} --expose-token"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building image: ${ACR_NAME}/${IMAGE_NAME}:${IMAGE_TAG}"
                    def result = sh(script: "docker build -f application/Dockerfile -t ${ACR_NAME}/${IMAGE_NAME}:${IMAGE_TAG} application", returnStatus: true)
                    if (result != 0) {
                        error "Docker build failed."
                    }
                }
            }
        }

        stages {
        stage('Tag Docker Image') {
            steps {
                script {
                    echo "Tagging Docker image"
                    sh "docker tag ${ACR_NAME}/${IMAGE_NAME}:${IMAGE_TAG} ${ACR_NAME}.azurecr.io/${IMAGE_NAME}:${IMAGE_TAG}"
                }
            }
        }

        stage('Login to ACR') {
            steps {
                script {
                    echo "Logging into Azure Container Registry"
                    sh """
                        echo "\${{ secrets.ACR_PASSWORD }}" | docker login ${ACR_NAME}.azurecr.io --username ${ACR_NAME} --password-stdin
                    """
                }
            }
        }

        stage('Push Docker Image to ACR') {
            steps {
                script {
                    echo "Pushing Docker image to Azure Container Registry"
                    sh "docker push ${ACR_NAME}.azurecr.io/${IMAGE_NAME}:${IMAGE_TAG}"
                }
            }
        }

        stage('Setup Kubernetes Credentials') {
            steps {
                script {
                    echo "Getting AKS credentials..."
                    sh """
                        az aks get-credentials --resource-group ${RESOURCE_GROUP} --name ${AKS_CLUSTER_NAME} --overwrite-existing
                    """
                }
            }
        }

        stage('Deploy Application') {
            steps {
                script {
                    echo 'Deploying application resources to AKS...'
                    applyK8sConfig('./application/k8s/deployment.yml')
                    applyK8sConfig('./application/k8s/service.yml')
                }
            }
        }
        stage('Apply Horizontal Pod Autoscaler (HPA)') {
            steps {
                script {
                    echo 'Applying Horizontal Pod Autoscaler...'
                    applyK8sConfig('./application/k8s/hpa.yml')
                }
            }
        }

        stage('Create Ingress') {
            steps {
                script {
                    echo 'Creating Ingress for the application...'
                    applyK8sConfig('./application/k8s/ingress.yml')
                }
            }
        }

        stage('Monitor HPA') {
            steps {
                script {
                    echo 'Monitoring HPA status...'
                    sh '''
                        chmod +x ${HPA_SCRIPT_PATH}/monitor-hpa.sh
                        ${HPA_SCRIPT_PATH}/monitor-hpa.sh
                    '''
                }
            }
        }

        stage('Monitor Application Access') {
            steps {
                script {
                    echo 'Verifying application accessibility...'
                    sh """
                        curl -k https://$DOMAIN_NAME
                    """
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline executed successfully.'
            // Add notification logic here if needed
        }
        failure {
            echo 'Pipeline execution failed.'
            // Add notification logic here if needed
        }
    }
}

// Helper function to apply Kubernetes configurations
def applyK8sConfig(filePath) {
    if (fileExists(filePath) && fileSize(filePath) > 0) {
        sh "kubectl apply -f ${filePath}"
    } else {
        echo "File ${filePath} does not exist or is empty."
    }
}