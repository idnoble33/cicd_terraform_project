pipeline {
    agent any

    // environment {
    //     KUBE_CONFIG = "/var/lib/jenkins/.kube/config"
    //     AKS_RESOURCE_GROUP = "Idowu-Candidate"
    //     AKS_CLUSTER_NAME = "aks-2hf81s7y"
    //     DOMAIN_NAME = "joidag.ca"
    //     CERT_MANAGER_ISSUER = "letsencrypt-prod"
    //     SECRET_NAME = "hello-world-tls"
    // }
       nvironment {
        AZURE_SUBSCRIPTION_ID = credentials('azure_subscription_id')
        AZURE_CLIENT_ID       = credentials('azure_client_id')
        AZURE_CLIENT_SECRET   = credentials('azure_client_secret')
        AZURE_TENANT_ID       = credentials('azure_tenant_id')
        ACR_NAME              = "myacrname123"  // Replace with your actual ACR name
        IMAGE_NAME            = "hello-world"
        IMAGE_TAG             = "v1"
        HPA_SCRIPT_PATH       = "terraform/scripts" // Path for HPA scripts
        RESOURCE_GROUP        = "Idowu-Candidate"
        AKS_CLUSTER_NAME      = "aks-c3z6s4f8" // Correct AKS cluster name
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    // Checkout the repo containing your Kubernetes YAMLs
                    checkout scm
                }
            }
        }
stage('Azure Login') {
            steps {
                script {
                    echo "Logging into Azure..."
                    withCredentials([
                        string(credentialsId: 'azure_client_id', variable: 'AZURE_CLIENT_ID'),
                        string(credentialsId: 'azure_client_secret', variable: 'AZURE_CLIENT_SECRET'),
                        string(credentialsId: 'azure_tenant_id', variable: 'AZURE_TENANT_ID')
                    ]) {
                        sh """
                            az login --service-principal --username ${AZURE_CLIENT_ID} --password ${AZURE_CLIENT_SECRET} --tenant ${AZURE_TENANT_ID}
                        """
                    }
                }
            }
        }

        stage('Login to Azure Container Registry') {
            steps {
                script {
                    echo "Logging into Azure Container Registry..."
                    sh "az acr login --name ${ACR_NAME}"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building image: ${ACR_NAME}/${IMAGE_NAME}:${IMAGE_TAG}"
                    sh "docker build -f application/Dockerfile -t ${ACR_NAME}/${IMAGE_NAME}:${IMAGE_TAG} application"
                }
            }
        }

        stage('Tag Docker Image') {
            steps {
                script {
                    echo "Tagging Docker image"
                    sh "docker tag ${ACR_NAME}/${IMAGE_NAME}:${IMAGE_TAG} ${ACR_NAME}.azurecr.io/${IMAGE_NAME}:${IMAGE_TAG}"
                }
            }
        }

        stage('Push Docker Image to ACR') {
            steps {
                script {
                    echo "Pushing Docker image to Azure Container Registry"
                    sh "docker push ${ACR_NAME}.azurecr.io/${IMAGE_NAME}:${IMAGE_TAG}"
                }
            }
        }
        stage('Setup Kubernetes Credentials') {
            steps {
                script {
                    // Get AKS credentials to configure kubectl
                    sh """
                        az aks get-credentials --resource-group ${AKS_RESOURCE_GROUP} --name ${AKS_CLUSTER_NAME} --overwrite-existing
                    """
                }
            }
        }

        stage('Deploy Application') {
            steps {
                script {
                    echo 'Deploying new application resources to AKS...'

                    // Apply YAML files for deployment
                    sh '''
                        if [ -f ./application/k8s/deployment.yml ]; then
                            kubectl apply -f ./application/k8s/deployment.yml
                        fi
                        if [ -f ./application/k8s/service.yml ]; then
                            kubectl apply -f ./application/k8s/service.yml
                        fi
                    '''
                }
            }
        }

        stage('Apply Horizontal Pod Autoscaler (HPA)') {
            steps {
                script {
                    echo 'Applying Horizontal Pod Autoscaler...'

                    // Apply HPA YAML file
                    sh '''
                        if [ -f ./application/k8s/hpa.yml ]; then
                            kubectl apply -f ./application/k8s/hpa.yml
                        fi
                    '''
                }
            }
        }

        stage('Create Ingress') {
            steps {
                script {
                    echo 'Creating Ingress for the application...'

                    // Apply Ingress YAML file
                    sh '''
                        if [ -f ./application/k8s/ingress.yml ]; then
                            kubectl apply -f ./application/k8s/ingress.yml
                        fi
                    '''
                }
            }
        }

        stage('Monitor HPA') {
            steps {
                script {
                    echo 'Monitoring HPA status...'
                    sh '''
                        chmod +x terraform/scripts/monitor-hpa.sh
                        terraform/scripts/monitor-hpa.sh
                    '''
                }
            }
        }

        stage('Monitor Application Access') {
            steps {
                script {
                    echo 'Verifying application accessibility...'
                    sh """
                        curl -k https://$DOMAIN_NAME
                    """
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline executed successfully.'
        }
        failure {
            echo 'Pipeline execution failed.'
        }
    }
}
