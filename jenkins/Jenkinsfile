pipeline {
    agent any

    environment {
        KUBE_CONFIG = "/var/lib/jenkins/.kube/config"
        AKS_RESOURCE_GROUP = "Idowu-Candidate"
        AKS_CLUSTER_NAME = "aks-2hf81s7y"
        DOMAIN_NAME = "joidag.ca"
        CERT_MANAGER_ISSUER = "letsencrypt-prod"
        SECRET_NAME = "hello-world-tls"
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    // Checkout the repository
                    checkout scm
                }
            }
        }

        stage('Terraform Prompt') {
            steps {
                script {
                    // Prompt the user to choose between apply or destroy
                    def action = input(
                        message: 'Choose Terraform Action:',
                        parameters: [choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'Choose action to perform')]
                    )
                    echo "You selected: ${action}"
                    env.TERRAFORM_ACTION = action
                }
            }
        }

        stage('Terraform Init') {
            steps {
                script {
                    echo 'Initializing Terraform...'
                    sh '''
                        cd terraform
                        terraform init
                    '''
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                script {
                    echo 'Planning Terraform changes...'
                    sh '''
                        cd terraform
                        terraform plan -out=tfplan
                    '''
                }
            }
        }

        stage('Terraform Apply or Destroy') {
            when {
                expression {
                    return env.TERRAFORM_ACTION == 'apply' || env.TERRAFORM_ACTION == 'destroy'
                }
            }
            steps {
                script {
                    if (env.TERRAFORM_ACTION == 'apply') {
                        echo 'Applying Terraform plan...'
                        sh '''
                            cd terraform
                            terraform apply -auto-approve tfplan
                        '''
                    } else if (env.TERRAFORM_ACTION == 'destroy') {
                        echo 'Destroying Terraform resources...'
                        sh '''
                            cd terraform
                            terraform destroy -auto-approve
                        '''
                    }
                }
            }
        }

        stage('Setup Kubernetes Credentials') {
            steps {
                script {
                    // Get AKS credentials to configure kubectl
                    sh """
                        az aks get-credentials --resource-group ${AKS_RESOURCE_GROUP} --name ${AKS_CLUSTER_NAME} --overwrite-existing
                    """
                }
            }
        }

        stage('Deploy Kubernetes Resources') {
            steps {
                script {
                    echo 'Applying Kubernetes resources...'
                    sh '''
                        if [ -f ./application/k8s/deployment.yml ]; then
                            kubectl apply -f ./application/k8s/deployment.yml
                        fi
                        if [ -f ./application/k8s/service.yml ]; then
                            kubectl apply -f ./application/k8s/service.yml
                        fi
                        if [ -f ./application/k8s/hpa.yml ]; then
                            kubectl apply -f ./application/k8s/hpa.yml
                        fi
                        if [ -f ./application/k8s/ingress.yml ]; then
                            kubectl apply -f ./application/k8s/ingress.yml
                        fi
                    '''
                }
            }
        }

        stage('Monitor Application') {
            steps {
                script {
                    echo 'Monitoring application accessibility...'
                    sh """
                        curl -k https://$DOMAIN_NAME
                    """
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline executed successfully.'
        }
        failure {
            echo 'Pipeline execution failed.'
        }
    }
}
